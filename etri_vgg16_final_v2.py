# -*- coding: utf-8 -*-
"""Etri_Vgg16_final_v2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fRueLWUSr9i04MQaTKCFJQ_PtkfTScDn
"""

from google.colab import drive
drive.mount('/content/gdrive')

# dataset.py
'''
AI Fashion Coordinator
(Baseline For Fashion-How Challenge)

MIT License

Copyright (C) 2022, Integrated Intelligence Research Section, ETRI

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Update: 2022.04.20.
'''
import torch
import torch.utils.data
import numpy as np
from torchvision import transforms
from skimage import io, transform, color

class BackGround(object):
    """Operator that resizes to the desired size while maintaining the ratio
        fills the remaining part with a black background

    Args:
        output_size (tuple or int): Desired output size. If tuple, output is
            matched to output_size.
    """

    def __init__(self, output_size):
        self.output_size = output_size

    def __call__(self, image, landmarks, sub_landmarks=None):
        h, w = image.shape[:2]

        if isinstance(self.output_size, int):
            if h > w:
                new_h, new_w = self.output_size, self.output_size * w / h
            else:
                new_h, new_w = self.output_size * h / w, self.output_size
        else:
            new_h, new_w = self.output_size

        new_h, new_w = int(new_h), int(new_w)
        img = transform.resize(image, (new_h, new_w), mode='constant')

        if landmarks is not None:
            landmarks = landmarks * [new_w / w, new_h / h]

            new_image = np.zeros((self.output_size, self.output_size, 3))

            if h > w:
                new_image[:,(112 - new_w//2):(112 - new_w//2 + new_w),:] = img
                landmarks = landmarks + [112 - new_w//2, 0]
            else:
                new_image[(112 - new_h//2):(112 - new_h//2 + new_h), :, :] = img
                landmarks = landmarks + [0, 112 - new_h//2]

            if sub_landmarks is not None:
                sub_landmarks = sub_landmarks * [new_w / w, new_h / h]
                if h > w:
                    sub_landmarks = sub_landmarks + [112 - new_w // 2, 0]
                else:
                    sub_landmarks = sub_landmarks + [0, 112 - new_h // 2]
                return new_image, landmarks, sub_landmarks
            else:
                return new_image, landmarks
        else:
            new_image = np.zeros((self.output_size, self.output_size, 3))
            if h > w:
                new_image[:,(112 - new_w//2):(112 - new_w//2 + new_w),:] = img
            else:
                new_image[(112 - new_h//2):(112 - new_h//2 + new_h), :, :] = img

            return new_image


class BBoxCrop(object):
    """ Operator that crops according to the given bounding box coordinates. """

    def __call__(self, image, x_1, y_1, x_2, y_2):
        h, w = image.shape[:2]

        top = y_1
        left = x_1
        new_h = y_2 - y_1
        new_w = x_2 - x_1

        image = image[top: top + new_h,
                      left: left + new_w]

        return image


class ETRIDataset_emo(torch.utils.data.Dataset):
    """ Dataset containing emotion categories (Daily, Gender, Embellishment). """

    def __init__(self, df, base_path):
        self.df = df
        self.base_path = base_path
        self.bbox_crop = BBoxCrop()
        self.background = BackGround(224)
        self.to_tensor = transforms.ToTensor()
        self.normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406],
                                              std=[0.229, 0.224, 0.225])

        # for vis
        self.unnormalize = transforms.Normalize(mean=[-0.485 / 0.229, -0.456 / 0.224, -0.406 / 0.225],
                                                std=[1 / 0.229, 1 / 0.224, 1 / 0.225])
        self.to_pil = transforms.ToPILImage()


    def __getitem__(self, i):
        sample = self.df.iloc[i]
        image = io.imread(self.base_path + sample['image_name'])
        if image.shape[2] != 3:
            image = color.rgba2rgb(image)
        daily_label = sample['Daily']
        gender_label = sample['Gender']
        embel_label = sample['Embellishment']
        bbox_xmin = sample['BBox_xmin']
        bbox_ymin = sample['BBox_ymin']
        bbox_xmax = sample['BBox_xmax']
        bbox_ymax = sample['BBox_ymax']

        image = self.bbox_crop(image, bbox_xmin, bbox_ymin, bbox_xmax, bbox_ymax)
        image = self.background(image, None)

        image_ = image.copy()

        image_ = self.to_tensor(image_)
        image_ = self.normalize(image_)
        image_ = image_.float()

        ret = {}
        ret['ori_image'] = image
        ret['image'] = image_
        ret['daily_label'] = daily_label
        ret['gender_label'] = gender_label
        ret['embel_label'] = embel_label

        return ret

    def __len__(self):
        return len(self.df)

# # networks.py

# import torch.nn as nn
# import torchvision.models as models

# class Inception_Extractor(nn.Module):
#     """Feature extractor based on ResNet structure
#         Selectable from resnet18 to resnet152

#     Args:
#         resnetnum: Desired resnet version
#                     (choices=['18','34','50','101','152'])
#         pretrained: 'True' if you want to use the pretrained weights provided by Pytorch,
#                     'False' if you want to train from scratch.
#     """

#     def __init__(self, incept_num, pretrained=True): #incept_num = in_channels
#         super(Inception_Extractor, self).__init__()
#         self.inception = models.inception_v3(pretrained=pretrained)
#         print(11)
#         # self.branch1x1 = nn.Conv2d(incept_num,16,kernel_size=1)
#         # print(12)
#         # self.branch5x5_1 = nn.Conv2d(incept_num,16,kernel_size=1)
#         # print(13)
#         # self.branch5x5_2 = nn.Conv2d(16,24,kernel_size=3,padding=2)
#         # print(14)
        
#         # self.branch3x3_1 = nn.Conv2d(incept_num,16,kernel_size=1)
#         # print(15)
#         # self.branch3x3_2 = nn.Conv2d(16,24,kernel_size=3,padding=1)
#         # print(16)
#         # self.branch3x3_3 = nn.Conv2d(24,24,kernel_size=3,padding=1)
#         # print(17)
#         # self.branch_pool = nn.Conv2d(incept_num,24,kernel_size=1)
#         #-----------------------------------------------------------------
#         print(18)
#         self.modules_front = list(self.inception.children())[:-2]
#         print(19)
#         self.model_front = nn.Sequential(*self.modules_front)

#     def front(self, x):
#         """ In the resnet structure, input 'x' passes through conv layers except for fc layers. """
#         return self.model_front(x)


# class Baseline_Inception_emo(nn.Module):
#     """ Classification network of emotion categories based on Inception structure. """
    
#     def __init__(self):
#         super(Baseline_Inception_emo, self).__init__()
#         print(1)
#         #-------------------------------------------------------------------
#         self.encoder = Inception_Extractor(9)
#         self.encoder = models.inception_v3(pretrained=True)
#         # print(2)
#         # self.conv1 = nn.Conv2d(9,10,kernel_size=(3,3), stride=3)
#         # print(3)
#         # self.conv2 = nn.Conv2d(88,20,kernel_size=(3,3), stride=3)
#         # print(4)
        
#         # self.incept1 = Inception_Extractor(incept_num = 10)
#         # self.incept2 = Inception_Extractor(incept_num = 20)
        
#         self.max_pool = nn.MaxPool2d(2)
#         self.fc = nn.Linear(1408,10)

#     def forward(self, x):
#         """ Forward propagation with input 'x' """
#         print(44)
#         feat = self.encoder.front(x['image'])
#         print(5)
#         flatten = self.avg_pool(feat).squeeze()
#         print(6)

#         out_daily = self.daily_linear(flatten)
#         print(7)
#         out_gender = self.gender_linear(flatten)
#         out_embel = self.embel_linear(flatten)

#         return out_daily, out_gender, out_embel


# if __name__ == '__main__':
#     pass

# networks.py
'''
AI Fashion Coordinator
(Baseline For Fashion-How Challenge)

MIT License

Copyright (C) 2022, Integrated Intelligence Research Section, ETRI

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Update: 2022.04.20.
'''
import torch.nn as nn
import torchvision.models as models

# from keras.applications.inception_v3 import InceptionV3
# model = InceptionV3(weights = None, include_top=False, input_shape=(300, 300, 3))


# # fc 제외하고 freeze
# for n, p in model.named_parameters():
#     if '_fc' not in n:
#         p.requires_grad = False
# # net = torch.nn.parallel.DistributedDataParallel(model)
# for name, param in model.named_parameters():
#     print(name, ':', param.requires_grad)

class VggExtractor(nn.Module):
    """Feature extractor based on ResNet structure
        Selectable from resnet18 to resnet152

    Args:
        resnetnum: Desired resnet version
                    (choices=['18','34','50','101','152'])
        pretrained: 'True' if you want to use the pretrained weights provided by Pytorch,
                    'False' if you want to train from scratch.
    """

    def __init__(self, vggnetnum='16', pretrained=True):
        super(VggExtractor, self).__init__()

        if vggnetnum == '16':
            self.vggnet = models.vgg16(pretrained=pretrained)
        # elif resnetnum == '34':
        #     self.resnet = models.resnet34(pretrained=pretrained)
        # elif resnetnum == '50':
        #     self.resnet = models.resnet50(pretrained=pretrained)
        # elif resnetnum == '101':
        #     self.resnet = models.resnet101(pretrained=pretrained)
        # elif resnetnum == '152':
        #     self.resnet = models.resnet152(pretrained=pretrained)

        self.modules_front = list(self.vggnet.children())[:-2]
        self.model_front = nn.Sequential(*self.modules_front)

    def front(self, x):
        """ In the resnet structure, input 'x' passes through conv layers except for fc layers. """
        return self.model_front(x)


class Baseline_VggNet_emo(nn.Module):
    """ Classification network of emotion categories based on ResNet18 structure. """
    
    def __init__(self):
        super(Baseline_VggNet_emo, self).__init__()

        self.encoder = VggExtractor('16')
        self.avg_pool = nn.AvgPool2d(kernel_size=7)

        self.daily_linear = nn.Linear(512, 7)
        self.gender_linear = nn.Linear(512, 6)
        self.embel_linear = nn.Linear(512, 3)

    def forward(self, x):
        """ Forward propagation with input 'x' """
        feat = self.encoder.front(x['image'])
        flatten = self.avg_pool(feat).squeeze()

        out_daily = self.daily_linear(flatten)
        out_gender = self.gender_linear(flatten)
        out_embel = self.embel_linear(flatten)

        return out_daily, out_gender, out_embel


if __name__ == '__main__':
    pass

df = pd.read_csv('/content/gdrive/MyDrive/elicecoding_AI/Etri_fashionhow/data/task1/temp_dataset.csv')

train, valid = train_test_split(df,
                            test_size = 0.1,
                            random_state = 50)

# train.py
from sklearn.model_selection import train_test_split
'''

'''
# from dataset import ETRIDataset_emo
# from networks import *

import pandas as pd
import os
import argparse
import time

import torch
import torch.utils.data
import torch.utils.data.distributed


# parser = argparse.ArgumentParser()
# parser.add_argument("--version", type=str, default='Baseline_ResNet_emo')
# parser.add_argument('--epochs', default=100, type=int, metavar='N',
#                     help='number of total epochs to run')
# parser.add_argument('--lr', default=0.0001, type=float, metavar='N',
#                     help='learning rate')
# parser.add_argument('-b', '--batch-size', default=128, type=int,
#                     metavar='N',
#                     help='mini-batch size (default: 256), this is the total '
#                          'batch size of all GPUs on the current node when '
#                          'using Data Parallel or Distributed Data Parallel')
# parser.add_argument('--seed', default=None, type=int,
#                     help='seed for initializing training. ')

# a = parser.parse_args()

import easydict
a = easydict.EasyDict({
    "version" : "Baseline_VggNet_emo",
     "epochs" : 20,
     "lr" : 1e-4,
     "batch_size" : 64,
     "seed" : None
})

DEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# def main():
""" The main function for model training. """
if os.path.exists('models') is False:
    os.makedirs('models')

save_path = 'models/' + a.version
if os.path.exists(save_path) is False:
    os.makedirs(save_path)

net = Baseline_VggNet_emo().to(DEVICE)

df = pd.read_csv('/content/gdrive/MyDrive/elicecoding_AI/Etri_fashionhow/data/task1/temp_dataset.csv')

train, valid = train_test_split(df,
                            test_size = 0.1,
                            random_state = 50)

train_dataset = ETRIDataset_emo(train, base_path='/content/gdrive/MyDrive/elicecoding_AI/Etri_fashionhow/data/task1/train/')
train_dataloader = torch.utils.data.DataLoader(train_dataset, batch_size=a.batch_size, shuffle=True, num_workers=0)

optimizer = torch.optim.Adam(net.parameters(), lr=a.lr)
criterion = nn.CrossEntropyLoss().to(DEVICE)

total_step = len(train_dataloader)
step = 0
t0 = time.time()

for epoch in range(a.epochs):
    net.train()

    for i, sample in enumerate(train_dataloader):
        optimizer.zero_grad()
        step += 1
        for key in sample:
            sample[key] = sample[key].to(DEVICE)
        out_daily, out_gender, out_embel = net(sample)

        loss_daily = criterion(out_daily, sample['daily_label'])
        loss_gender = criterion(out_gender, sample['gender_label'])
        loss_embel = criterion(out_embel, sample['embel_label'])
        loss = loss_daily + loss_gender + loss_embel

        loss.backward()
        optimizer.step()

        if (i + 1) % 10 == 0:
            print('Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}, '
                  'Loss_daily: {:.4f}, Loss_gender: {:.4f}, Loss_embel: {:.4f}, Time : {:2.3f}'
                  .format(epoch + 1, a.epochs, i + 1, total_step, loss.item(),
                          loss_daily.item(), loss_gender.item(), loss_embel.item(), time.time() - t0))

            t0 = time.time()

    if ((epoch + 1) % 10 == 0):
        a.lr *= 0.9
        optimizer = torch.optim.Adam(net.parameters(), lr=a.lr)
        print("learning rate is decayed")


    if ((epoch + 1) % 20 == 0):
        print('Saving Model....')
        torch.save(net.state_dict(), save_path + '/model_' + str(epoch + 1) + '.pkl')
        print('OK.')



# if __name__ == '__main__':
#     main()

# test.py

'''

'''
# from dataset import ETRIDataset_emo
# from networks import *

import pandas as pd
import numpy as np
from sklearn.metrics import confusion_matrix
# train_test_split
from sklearn.model_selection import train_test_split

import torch
import torch.utils.data
import torch.utils.data.distributed

DEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')


def main():
    """ The main function of the test process for performance measurement. """
    net = Baseline_VggNet_emo().to(DEVICE)
    trained_weights = torch.load('/content/models/Baseline_VggNet_emo/model_20.pkl',map_location=DEVICE)
    net.load_state_dict(trained_weights)

    # df = pd.read_csv('/content/gdrive/MyDrive/elicecoding_AI/Etri_fashionhow/data/task1/temp_dataset.csv')
    
    val_dataset = ETRIDataset_emo(valid, base_path='/content/gdrive/MyDrive/elicecoding_AI/Etri_fashionhow/data/task1/train/')
    val_dataloader = torch.utils.data.DataLoader(val_dataset, batch_size=128, shuffle=False, num_workers=0)

    daily_gt_list = np.array([])
    daily_pred_list = np.array([])
    gender_gt_list = np.array([])
    gender_pred_list = np.array([])
    embel_gt_list = np.array([])
    embel_pred_list = np.array([])

    for j, sample in enumerate(val_dataloader):
        for key in sample:
            sample[key] = sample[key].to(DEVICE)
        out_daily, out_gender, out_embel = net(sample)

        daily_gt = np.array(sample['daily_label'].cpu())
        daily_gt_list = np.concatenate([daily_gt_list, daily_gt], axis=0)
        gender_gt = np.array(sample['gender_label'].cpu())
        gender_gt_list = np.concatenate([gender_gt_list, gender_gt], axis=0)
        embel_gt = np.array(sample['embel_label'].cpu())
        embel_gt_list = np.concatenate([embel_gt_list, embel_gt], axis=0)

        daily_pred = out_daily
        _, daily_indx = daily_pred.max(1)
        daily_pred_list = np.concatenate([daily_pred_list, daily_indx.cpu()], axis=0)

        gender_pred = out_gender
        _, gender_indx = gender_pred.max(1)
        gender_pred_list = np.concatenate([gender_pred_list, gender_indx.cpu()], axis=0)

        embel_pred = out_embel
        _, embel_indx = embel_pred.max(1)
        embel_pred_list = np.concatenate([embel_pred_list, embel_indx.cpu()], axis=0)

    daily_top_1, daily_acsa = get_test_metrics(daily_gt_list, daily_pred_list)
    gender_top_1, gender_acsa = get_test_metrics(gender_gt_list, gender_pred_list)
    embel_top_1, embel_acsa = get_test_metrics(embel_gt_list, embel_pred_list)

    # top1
    total_top_1 = (daily_top_1 + gender_top_1 + embel_top_1) / 3
    total_acsa = (daily_acsa + gender_acsa + embel_acsa) / 3

    print("------------------------------------------------------")
    print(
        " total_top_1 = %.5f, total_acsa = %.5f |||| Daily:(Top-1=%.5f, ACSA=%.5f), Gender:(Top-1=%.5f, ACSA=%.5f), Embellishment:(Top-1=%.5f, ACSA=%.5f)" % (
            total_top_1, total_acsa, daily_top_1, daily_acsa, gender_top_1, gender_acsa, embel_top_1, embel_acsa))
    print("------------------------------------------------------")

    #
    # print("------------------------------------------------------")
    # print(
    #     "Daily:(Top-1=%.5f, ACSA=%.5f), Gender:(Top-1=%.5f, ACSA=%.5f), Embellishment:(Top-1=%.5f, ACSA=%.5f)" % (
    #         daily_top_1, daily_acsa, gender_top_1, gender_acsa, embel_top_1, embel_acsa))
    # print("------------------------------------------------------")


def get_test_metrics(y_true, y_pred, verbose=True):
    """
    :return: asca, pre, rec, spe, f1_ma, f1_mi, g_ma, g_mi
    """
    y_true, y_pred = y_true.astype(np.int8), y_pred.astype(np.int8)

    cnf_matrix = confusion_matrix(y_true, y_pred)
    if verbose:
        print(cnf_matrix)

    FP = cnf_matrix.sum(axis=0) - np.diag(cnf_matrix)
    FN = cnf_matrix.sum(axis=1) - np.diag(cnf_matrix)
    TP = np.diag(cnf_matrix)
    TN = cnf_matrix.sum() - (FP + FN + TP)

    top_1 = np.sum(TP)/np.sum(np.sum(cnf_matrix))
    cs_accuracy = TP / cnf_matrix.sum(axis=1)

    return top_1, cs_accuracy.mean()


if __name__ == '__main__':
    main()

# predict.py

'''
AI Fashion Coordinator
(Baseline For Fashion-How Challenge)

MIT License

Copyright (C) 2022, Integrated Intelligence Research Section, ETRI

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Update: 2022.04.20.
'''
# from dataset import ETRIDataset_emo
# from networks import *

import pandas as pd
import numpy as np
from sklearn.metrics import confusion_matrix

import torch
import torch.utils.data
import torch.utils.data.distributed

DEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')


def main():
    """ The main function of the test process for performance measurement. """
    net = Baseline_VggNet_emo().to(DEVICE)
    trained_weights = torch.load('/content/models/Baseline_VggNet_emo/model_20.pkl', map_location=DEVICE)
    net.load_state_dict(trained_weights)

    df = pd.read_csv('/content/gdrive/MyDrive/elicecoding_AI/Etri_fashionhow/data/task1/info_etri20_emotion_test.csv')
    val_dataset = ETRIDataset_emo(df, base_path='/content/gdrive/MyDrive/elicecoding_AI/Etri_fashionhow/data/task1/test/')
    val_dataloader = torch.utils.data.DataLoader(val_dataset, batch_size=64, shuffle=False, num_workers=0)

    daily_pred_list = np.array([])
    gender_pred_list = np.array([])
    embel_pred_list = np.array([])

    for j, sample in enumerate(val_dataloader):
        for key in sample:
            sample[key] = sample[key].to(DEVICE)
        out_daily, out_gender, out_embel = net(sample)

        daily_pred = out_daily
        _, daily_indx = daily_pred.max(1)
        daily_pred_list = np.concatenate([daily_pred_list, daily_indx.cpu()], axis=0)

        gender_pred = out_gender
        _, gender_indx = gender_pred.max(1)
        gender_pred_list = np.concatenate([gender_pred_list, gender_indx.cpu()], axis=0)

        embel_pred = out_embel
        _, embel_indx = embel_pred.max(1)
        embel_pred_list = np.concatenate([embel_pred_list, embel_indx.cpu()], axis=0)

    df['Daily'] = daily_pred_list.astype(int)
    df['Gender'] = gender_pred_list.astype(int)
    df['Embellishment'] = embel_pred_list.astype(int)
    # 제출시 생성 위치는 기본적으로 /home/work/model/prediction.csv로
    # df.to_csv('/home/work/model/prediction.csv', index=False)
    df.to_csv('/content/gdrive/MyDrive/elicecoding_AI/home/work/model/prediction.csv', index=False)

if __name__ == '__main__':
    main()